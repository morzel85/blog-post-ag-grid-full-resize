{"version":3,"sources":["generator.js","calculator.js","App.js","serviceWorker.js","index.js"],"names":["getRandomCellValue","type","random","Math","floor","repeat","charAt","ceil","generateColumnDefsAndRowData","columnsCount","rowsCount","columnDefs","rowData","c","push","headerName","field","r","row","id","value","context","document","createElement","getContext","collectMaxWidth","text","group","maxWidths","width","measureText","maxWidth","get","undefined","set","calculateColumnWidths","config","console","time","Map","measureHeaders","font","headerFont","forEach","column","rowFont","cache","widthsCache","cachedWidth","collectMaxWidthCached","updatedColumnDefs","map","cd","padding","timeEnd","textWidthsCache","App","useState","gridApi","setGridApi","gridColumnApi","setGridColumnApi","useWidthsCache","setUseWidthsCache","setColumnDefs","setRowData","className","onClick","colIds","getAllColumns","colId","autoSizeColumns","def","setColumnWidth","checked","onChange","defaultColDef","resizable","sortable","getRowNodeId","data","deltaRowDataMode","onGridReady","params","api","columnApi","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c774ea3.chunk.js","sourcesContent":["const getRandomCellValue = type => {\r\n    const random = Math.random();\r\n\r\n    switch (type) {\r\n        case 0:\r\n            return random;\r\n        case 1:\r\n            return Math.floor(random * 1000);\r\n        case 2:\r\n            return 'Lorem ipsum! '.repeat(Math.floor(random * 3));\r\n        case 3:\r\n            return random > 0.5 ? 'ON' : 'OFF';\r\n        case 4:\r\n            return Math.floor(random * 1000000);\r\n        case 5:\r\n            return '!@#$%^&*'.charAt(Math.floor(random * 8)).repeat(random * 5);\r\n        case 6:\r\n            return 'Lorem ipsum! '.repeat(Math.ceil(random * 5));\r\n        case 7:\r\n            return ['AA', 'BBB', 'CCCC', 'DDDDD'][Math.floor(random * 4)];\r\n        case 8:\r\n            return ['X-Y-Z', 'asdf', 'qaz'][Math.floor(random * 3)].repeat(random * 5);\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nconst generateColumnDefsAndRowData = (columnsCount, rowsCount) => {\r\n    const columnDefs = [];\r\n    const rowData = [];\r\n\r\n    for (let c = 0; c < columnsCount; c++) {\r\n        columnDefs.push({\r\n            headerName: 'Column ' + c,\r\n            field: 'field_' + c\r\n        });\r\n    }\r\n\r\n    for (let r = 0; r < rowsCount; r++) {\r\n        const row = { id: r }\r\n\r\n        for (let c = 0; c < columnsCount; c++) {\r\n            const type = c % 10;\r\n            const value = getRandomCellValue(type);\r\n\r\n            row['field_' + c] = value;\r\n        }\r\n\r\n        rowData.push(row);\r\n    }\r\n\r\n    return { columnDefs, rowData };\r\n}\r\n\r\nexport default generateColumnDefsAndRowData;","const canvas = document.createElement('canvas');\r\nconst context = canvas.getContext('2d');\r\n\r\nconst collectMaxWidth = (text, group, maxWidths) => {\r\n    const width = context.measureText(text).width;\r\n\r\n    const maxWidth = maxWidths.get(group);\r\n\r\n    if (maxWidth === undefined || width > maxWidth) {\r\n        maxWidths.set(group, width);\r\n    }\r\n};\r\n\r\nconst collectMaxWidthCached = (text, group, maxWidths, widthsCache) => {\r\n    const cachedWidth = widthsCache.get(text);\r\n\r\n    let width;\r\n\r\n    if (cachedWidth === undefined) {\r\n        width = context.measureText(text).width;\r\n        widthsCache.set(text, width);\r\n    } else {\r\n        width = cachedWidth;\r\n    }\r\n\r\n    const maxWidth = maxWidths.get(group);\r\n\r\n    if (maxWidth === undefined || width > maxWidth) {\r\n        maxWidths.set(group, width);\r\n    }\r\n};\r\n\r\nconst calculateColumnWidths = config => {\r\n    console.time('Column widths calculation');\r\n\r\n    const maxWidths = new Map()\r\n\r\n    if (config.measureHeaders) {\r\n        context.font = config.headerFont;\r\n\r\n        config.columnDefs.forEach(column => {\r\n            collectMaxWidth(column.headerName, column.field, maxWidths);\r\n        });\r\n    }\r\n\r\n    context.font = config.rowFont;\r\n\r\n    config.rowData.forEach(row => {\r\n        config.columnDefs.forEach(column => {\r\n            if (config.cache) {\r\n                collectMaxWidthCached(row[column.field], column.field, maxWidths, config.cache);\r\n            } else {\r\n                collectMaxWidth(row[column.field], column.field, maxWidths);\r\n            }\r\n        });\r\n    });\r\n\r\n    const updatedColumnDefs = config.columnDefs.map(cd => ({\r\n        ...cd,\r\n        width: Math.ceil(maxWidths.get(cd.field) + config.padding)\r\n    }));\r\n\r\n    console.timeEnd('Column widths calculation');\r\n\r\n    return updatedColumnDefs\r\n};\r\n\r\nexport default calculateColumnWidths;","import React, { useState } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\n\r\nimport generateColumnDefsAndRowData from './generator';\r\nimport calculateColumnWidths from './calculator';\r\n\r\nimport './App.css';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nconst textWidthsCache = new Map();\r\n\r\nconst App = () => {    \r\n    const [gridApi, setGridApi] = useState(null);\r\n    const [gridColumnApi, setGridColumnApi] = useState(null);\r\n    const [useWidthsCache, setUseWidthsCache] = useState(true);\r\n\r\n    const [columnDefs, setColumnDefs] = useState([]);\r\n    const [rowData, setRowData] = useState([]);\r\n\r\n    const handleGenerateClick = () => {\r\n        const { columnDefs, rowData } = generateColumnDefsAndRowData(300, 150);\r\n        setColumnDefs(columnDefs);\r\n        setRowData(rowData);\r\n    };\r\n\r\n    const handleResizeWithAutoClick = () => {\r\n        if (gridColumnApi) {\r\n            console.time('Resize with autoSizeColumns');\r\n\r\n            const colIds = gridColumnApi.getAllColumns().map(c => c.colId);\r\n            gridColumnApi.autoSizeColumns(colIds);\r\n\r\n            console.timeEnd('Resize with autoSizeColumns');\r\n        }\r\n    };\r\n\r\n    const handleResizeWithCustomClick = () => {\r\n        console.time('Resize all columns (including widths calculation)');\r\n\r\n        if (gridApi && gridColumnApi) {\r\n            // Here all columns and rows are used because there are no hidden columns\r\n            // and the the grid has neither paging nor filtering enabled.\r\n            const updatedColumDefs = calculateColumnWidths({\r\n                columnDefs,\r\n                rowData,\r\n                measureHeaders: true,\r\n                headerFont: 'bold 12px Arial',\r\n                rowFont: 'normal 12px Arial',\r\n                padding: 30,\r\n                cache: useWidthsCache ? textWidthsCache : null\r\n            });\r\n     \r\n            updatedColumDefs.forEach(def =>\r\n                gridColumnApi.setColumnWidth(def.field, def.width)\r\n            );\r\n\r\n            // Setting width by setColumnWidth has the advantage of preserving  \r\n            // column changes done by user such as sorting or filters.\r\n            // The disadvantage is that initial resize might be slow if the grid was\r\n            // scrolled towards last columns before resizing was invoked.\r\n            // Bulk resizing via gridApi.setColumnDefs(updatedColumDefs) should help\r\n            // in such cases but columns settings will be reset!\r\n        }\r\n\r\n        console.timeEnd('Resize all columns (including widths calculation)');\r\n    };\r\n\r\n    const handleSetUseWidthsChange = () => {\r\n        setUseWidthsCache(!useWidthsCache);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <div>\r\n                    <button onClick={handleGenerateClick}>Generate data (150 rows with 300 columns)</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={handleResizeWithAutoClick}>Resize columns with columnApi.autoSizeColumns</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={handleResizeWithCustomClick}>Resize columns with custom text measure</button>\r\n                    <label>\r\n                        <input type=\"checkbox\" checked={useWidthsCache} onChange={handleSetUseWidthsChange} />\r\n                        Use widths cache\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div className=\"ag-theme-balham\">\r\n                <AgGridReact\r\n                    defaultColDef={{\r\n                        width: 300,\r\n                        resizable: true,\r\n                        sortable: true                      \r\n                    }}\r\n                    columnDefs={columnDefs}\r\n                    rowData={rowData}\r\n                    getRowNodeId={data => data.id}\r\n                    deltaRowDataMode={true}\r\n                    onGridReady={params => {          \r\n                        setGridApi(params.api);              \r\n                        setGridColumnApi(params.columnApi);\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}